// Copyright (c) 1996-99 The Regents of the University of California. All
// Rights Reserved. Permission to use, copy, modify, and distribute this
// software and its documentation without fee, and without a written
// agreement is hereby granted, provided that the above copyright notice
// and this paragraph appear in all copies.  This software program and
// documentation are copyrighted by The Regents of the University of
// California. The software program and documentation are supplied "AS
// IS", without any accompanying services from The Regents. The Regents
// does not warrant that the operation of the program will be
// uninterrupted or error-free. The end-user understands that the program
// was developed for research purposes and is advised not to rely
// exclusively on the program for any reason.  IN NO EVENT SHALL THE
// UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
// SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
// ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
// THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
// PROVIDED HEREUNDER IS ON AN "AS IS" BASIS, AND THE UNIVERSITY OF
// CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
// UPDATES, ENHANCEMENTS, OR MODIFICATIONS.




// File: KeyEvent.java
// Classes: KeyEvent
// Original Author: johnnycoding@gmail.com
// $Id: KeyEvent.java 1011 2007-05-29 17:12:49Z johnnycoding $

package org.tigris.gef.base;

public interface KeyEvent extends InputEvent{

    public static final int VK_UP                  = 1004;

    public static final int VK_DOWN                = 1005;

    public static final int VK_LEFT                = 1006;

    public static final int VK_RIGHT               = 1007;

    public static final int SHIFT_MASK          = 1 << 0;

    public static final int META_MASK           = 1 << 2;

    public static final int ALT_MASK            = 1 << 3;

    public static int VK_ENTER = '\n';

    public static int VK_TAB = '\t';

    public static final int VK_ESCAPE = 0x1B;

    public static final int VK_SPACE = 0x20;

    /**
     * Constructs a <code>KeyEvent</code> object.
     * <p>Note that passing in an invalid <code>id</code> results in
     * unspecified behavior. This method throws an
     * <code>IllegalArgumentException</code> if <code>source</code>
     * is <code>null</code>.
     *
     * @param source    the <code>Component</code> that originated the event
     * @param id        an integer identifying the type of event
     * @param when      a long integer that specifies the time the event
     *                  occurred
     * @param modifiers the modifier keys down during event (shift, ctrl,
     *                  alt, meta)
     *                  Either extended _DOWN_MASK or old _MASK modifiers
     *                  should be used, but both models should not be mixed
     *                  in one event. Use of the extended modifiers is
     *                  preferred.
     * @param keyCode   the integer code for an actual key, or VK_UNDEFINED 
     *                  (for a key-typed event)
     * @param keyChar   the Unicode character generated by this event, or 
     *                  CHAR_UNDEFINED (for key-pressed and key-released
     *                  events which do not map to a valid Unicode character)
     * @throws IllegalArgumentException  if <code>id</code> is
     *     <code>KEY_TYPED</code> and <code>keyChar</code> is
     *     <code>CHAR_UNDEFINED</code>; or if <code>id</code> is
     *     <code>KEY_TYPED</code> and <code>keyCode</code> is not
     *     <code>VK_UNDEFINED</code>
     * @throws IllegalArgumentException if <code>source</code> is null
     */
    /**
     * Returns the integer keyCode associated with the key in this event.
     * 
     * @return the integer code for an actual key on the keyboard. 
     *         (For <code>KEY_TYPED</code> events, the keyCode is 
     *         <code>VK_UNDEFINED</code>.)
     */
    public int getKeyCode();

    /**
     * Set the keyCode value to indicate a physical key.
     *
     * @param keyCode an integer corresponding to an actual key on the keyboard.
     */
    public void setKeyCode(int keyCode);

    /**
     * Returns the character associated with the key in this event.
     * For example, the <code>KEY_TYPED</code> event for shift + "a" 
     * returns the value for "A".
     * <p>
     * <code>KEY_PRESSED</code> and <code>KEY_RELEASED</code> events 
     * are not intended for reporting of character input.  Therefore, 
     * the values returned by this method are guaranteed to be 
     * meaningful only for <code>KEY_TYPED</code> events.  
     *
     * @return the Unicode character defined for this key event.
     *         If no valid Unicode character exists for this key event, 
     *         <code>CHAR_UNDEFINED</code> is returned.
     */
    public char getKeyChar();

    /**
     * Set the keyChar value to indicate a logical character.
     *
     * @param keyChar a char corresponding to to the combination of keystrokes
     *                that make up this event.
     */
    public void setKeyChar(char keyChar);

}